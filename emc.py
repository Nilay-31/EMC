# -*- coding: utf-8 -*-
"""EMC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ddQBe7bcKMJXapRk6N9c867RpbP6eDq5
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import joblib
import warnings
warnings.filterwarnings('ignore')

# Streamlit App Title and Description
st.title("Email Marketing Campaign Analysis")
st.markdown(
    """### Overview
    Analyze and predict customer behavior based on email marketing data.
    Upload your dataset to explore, visualize, and model the data interactively.
    """
)

# Sidebar for File Upload
st.sidebar.header("Upload Dataset")
uploaded_file = st.sidebar.file_uploader("/content/Email_Marketing_Campaign_Dataset_Rounded.xlsx", type=["xlsx"])

if uploaded_file:
    # Load Dataset
    df = pd.read_excel(uploaded_file)

    # Display Dataset
    st.subheader("Dataset Preview")
    st.dataframe(df.head())

    # Dataset Information
    st.subheader("Dataset Information")
    st.write("Shape of the dataset:", df.shape)
    st.write("Number of duplicate rows:", df.duplicated().sum())
    st.write("Data Types:")
    st.write(df.dtypes)

    # Missing Values
    st.subheader("Missing Values")
    st.write(df.isnull().sum())

    # Descriptive Statistics
    st.subheader("Descriptive Statistics")
    st.write(df.describe())

    # Data Encoding
    encoder = LabelEncoder()
    df['Opened_Previous_Emails'] = encoder.fit_transform(df['Opened_Previous_Emails'])
    df['Clicked_Previous_Emails'] = encoder.fit_transform(df['Clicked_Previous_Emails'])
    df['Device_Type'] = encoder.fit_transform(df['Device_Type'])

    # Correlation Heatmap
    st.subheader("Correlation Heatmap")
    correlation_matrix = df.corr()
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
    st.pyplot(fig)

    # Distribution of Categorical Variables
    st.subheader("Categorical Variable Distributions")
    categorical_vars = ['Opened_Previous_Emails', 'Clicked_Previous_Emails', 'Device_Type']
    for var in categorical_vars:
        fig, ax = plt.subplots()
        sns.countplot(df[var], palette='viridis', ax=ax)
        ax.set_title(f"Distribution of {var}")
        st.pyplot(fig)

    # Boxplots for Numerical Variables
    st.subheader("Boxplots for Numerical Variables")
    numerical_vars = [
        'Customer_Age', 'Emails_Opened', 'Emails_Clicked',
        'Purchase_History', 'Time_Spent_On_Website',
        'Days_Since_Last_Open', 'Customer_Engagement_Score'
    ]
    for var in numerical_vars:
        fig, ax = plt.subplots()
        sns.boxplot(data=df, x='Opened_Previous_Emails', y=var, palette='pastel', ax=ax)
        ax.set_title(f"{var} vs Opened_Previous_Emails")
        st.pyplot(fig)

    # Model Training
    st.sidebar.header("Train Model")
    if st.sidebar.button("Start Training"):
        # Prepare Data
        X = df[numerical_vars]
        y = df['Opened_Previous_Emails']
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # Split Data
        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)

        # Random Forest Model
        pipeline = Pipeline([
            ('scaler', StandardScaler()),
            ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))
        ])
        pipeline.fit(X_train, y_train)

        # Predictions
        y_pred = pipeline.predict(X_test)

        # Evaluation
        accuracy = accuracy_score(y_test, y_pred)
        st.subheader("Model Performance")
        st.write(f"Accuracy: {accuracy:.2f}")
        st.write("Classification Report:")
        st.text(classification_report(y_test, y_pred))

        # Confusion Matrix
        cm = confusion_matrix(y_test, y_pred)
        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Opened', 'Opened'], yticklabels=['Not Opened', 'Opened'], ax=ax)
        ax.set_xlabel('Predicted')
        ax.set_ylabel('Actual')
        ax.set_title('Confusion Matrix')
        st.pyplot(fig)

        # Save Model
        model_path = 'email_open_prediction_model.pkl'
        joblib.dump(pipeline, model_path)
        st.success(f"Model saved as {model_path}")
else:
    st.warning("Please upload a dataset to proceed.")
